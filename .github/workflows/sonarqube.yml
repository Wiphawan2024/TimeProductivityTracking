name: SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Analyze
    runs-on: windows-latest

    steps:
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube Analysis
        working-directory: TimeProductivityTracking.web
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"Wiphawan2024_TimeProductivityTracking" `
            /o:"wiphawan2024" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="../coverage-report/SonarQube.xml"

      - name: Build solution
        working-directory: TimeProductivityTracking.web
        run: dotnet build --no-incremental

      - name: Run tests with coverage
        run: dotnet test TimeProductivityTracking.UnitTest/TimeProductivityTracking.UnitTest.csproj --no-build --collect:"XPlat Code Coverage"

      - name: Copy coverage report to a known location
        shell: pwsh
        run: |
          mkdir coverage-temp
          $file = Get-ChildItem -Recurse -Filter 'coverage.cobertura.xml' -Path 'TimeProductivityTracking.UnitTest\TestResults' | Select-Object -First 1
          if ($file) {
              Copy-Item $file.FullName -Destination coverage-temp\
          } else {
              Write-Host "❌ Coverage file not found!"
              exit 1
          }

      - name: Convert coverage to SonarQube format (licensed)
        env:
          REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
        shell: pwsh
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator `
            -reports:"coverage-temp/coverage.cobertura.xml" `
            -targetdir:"coverage-report" `
            -reportfile:"SonarQube.xml" `
            -reporttypes:SonarQube `
            -license:"$env:REPORTGENERATOR_LICENSE"
          Write-Host "Generated reports:"
          Get-ChildItem -Recurse -Filter *.xml | ForEach-Object {
            Write-Host " - $($_.FullName)"
          }

      - name: Ensure SonarQube.xml exists
        shell: pwsh
        run: |
          if (!(Test-Path coverage-report/SonarQube.xml)) {
            Write-Error "❌ SonarQube.xml not found!"
            exit 1
          } else {
            Write-Host "✅ SonarQube.xml is ready!"
          }

      - name: Show SonarQube.xml location
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Filter SonarQube.xml | ForEach-Object {
            Write-Host "✅ Found report: $($_.FullName)"
            Get-Content $_.FullName | Select-Object -First 10
          }

      - name: Show test results and coverage path
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "Looking for coverage reports..."
          Get-ChildItem -Recurse -Filter *.xml | Where-Object { $_.Name -like "*coverage*" } | ForEach-Object {
            Write-Host "Found: $($_.FullName)"
          }

      - name: End SonarQube Analysis
        working-directory: TimeProductivityTracking.web
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
